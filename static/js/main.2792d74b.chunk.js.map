{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MovieGenre","_ref2","genre","react_default","a","createElement","className","MoviePoster","_ref3","poster","alt","src","title","proptype","PropTypes","string","isRequired","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_getMovies","_callee","movies","regenerator_default","wrap","_context","prev","next","_this","_callApi","sent","setState","stop","_callee2","_context2","abrupt","fetch","then","response","json","data","catch","err","console","log","_renderMovies","movie","src_Movie","title_english","large_cover_image","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yVAkCA,SAASA,EAATC,GAA+B,IAATC,EAASD,EAATC,MACpB,OAAOC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBJ,EAAhC,KAGT,SAASK,EAATC,GAAsC,IAAfC,EAAeD,EAAfC,OAAQC,EAAOF,EAAPE,IAC7B,OAAOP,EAAAC,EAAAC,cAAA,OAAKM,IAAKF,EAAQC,IAAKA,EAAKE,MAAOF,EAAKJ,UAAU,kBAe3DN,EAAWa,SAAW,CACpBX,MAAOY,IAAUC,OAAOC,YAGXC,MApDf,SAAAC,GAAoD,IAAnCN,EAAmCM,EAAnCN,MAAOH,EAA4BS,EAA5BT,OAAQU,EAAoBD,EAApBC,OAAQC,EAAYF,EAAZE,SACtC,OACEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAACE,EAAD,CAAaE,OAAQA,EAAQC,IAAKE,KAGpCT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAgBM,GAC9BT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZa,EAAOE,IAAI,SAACnB,EAAOoB,GAClB,OAAOnB,EAAAC,EAAAC,cAACL,EAAD,CAAYE,MAAOA,EAAOqB,IAAKD,OAG1CnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CACEqB,KAAML,EACNM,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,aAEL,OCuCAC,6MA7DbC,MAAQ,KAMRC,gCAAa,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAA/B,EAAAgC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUC,EAAKC,WADf,OACLP,EADKG,EAAAK,KAEXF,EAAKG,SAAS,CACZT,WAHS,wBAAAG,EAAAO,SAAAX,QAObQ,8BAAW,SAAAI,IAAA,OAAAV,EAAA/B,EAAAgC,KAAA,SAAAU,GAAA,cAAAA,EAAAR,KAAAQ,EAAAP,MAAA,cAAAO,EAAAC,OAAA,SACFC,MACL,iEAECC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKlB,SACvBmB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,MANnB,wBAAAR,EAAAF,SAAAC,QASXY,cAAgB,WAad,OAZcjB,EAAKT,MAAMG,OAAOb,IAAI,SAACqC,EAAOpC,GAE1C,OADAiC,QAAQC,IAAIE,GAEVvD,EAAAC,EAAAC,cAACsD,EAAD,CACE/C,MAAO8C,EAAME,cACbnD,OAAQiD,EAAMG,kBACd1C,OAAQuC,EAAMvC,OACdC,SAAUsC,EAAMtC,SAChBG,IAAKD,0FA5BXwC,KAAK9B,8CAgDE,IACCE,EAAW4B,KAAK/B,MAAhBG,OACR,OACE/B,EAAAC,EAAAC,cAAA,OAAKC,UAAW4B,EAAS,MAAQ,gBAC9BA,EAAS4B,KAAKL,gBAAkB,kBAxDvBM,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnE,EAAAC,EAAAC,cAACkE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.2792d74b.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport LinesEllipsis from \"react-lines-ellipsis\";\n\nimport \"./Movie.css\";\n\nfunction Movie({ title, poster, genres, synopsis }) {\n  return (\n    <div className=\"Movie\">\n      <div className=\"Movie__Column\">\n        <MoviePoster poster={poster} alt={title} />\n      </div>\n\n      <div className=\"Movie__Column\">\n        <h1 className=\"Movie__Title\">{title}</h1>\n        <div className=\"Movie__Genres\">\n          {genres.map((genre, index) => {\n            return <MovieGenre genre={genre} key={index} />;\n          })}\n        </div>\n        <div className=\"Movie__Synopsis\">\n          <LinesEllipsis\n            text={synopsis}\n            maxLine=\"3\"\n            ellipsis=\"...\"\n            trimRight\n            basedOn=\"letters\"\n          />\n        </div>{\" \"}\n      </div>\n    </div>\n  );\n}\n\nfunction MovieGenre({ genre }) {\n  return <span className=\"Movie__Genre\">{genre} </span>;\n}\n\nfunction MoviePoster({ poster, alt }) {\n  return <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\" />;\n}\n\nMovie.propTypes = {\n  title: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n  genres: PropTypes.array.isRequired,\n  synopsis: PropTypes.string.isRequired\n};\n\nMoviePoster.propTypes = {\n  poster: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired\n};\n\nMovieGenre.proptype = {\n  genre: PropTypes.string.isRequired\n};\n\nexport default Movie;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"./Movie\";\nimport Movie from \"./Movie\";\n\nclass App extends Component {\n  state = {};\n\n  componentDidMount() {\n    this._getMovies();\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi();\n    this.setState({\n      movies\n    });\n  };\n\n  _callApi = async () => {\n    return fetch(\n      \"https://yts.am/api/v2/list_movies.json?sort_by=download_count\"\n    )\n      .then(response => response.json())\n      .then(json => json.data.movies)\n      .catch(err => console.log(err));\n  };\n\n  _renderMovies = () => {\n    const movie = this.state.movies.map((movie, index) => {\n      console.log(movie);\n      return (\n        <Movie\n          title={movie.title_english}\n          poster={movie.large_cover_image}\n          genres={movie.genres}\n          synopsis={movie.synopsis}\n          key={index}\n        />\n      );\n    });\n    return movie;\n  };\n\n  // _callApi = async () => {\n  //   try {\n  //     const movieData = await fetch(\n  //       \"https://yts.am/api/v2/list_movies.json?sort_by=download_count\"\n  //     );\n  //     const movieJSON = await movieData.json();\n  //     const movies = movieJSON.data.movies;\n  //     return movies;\n  //   } catch (error) {\n  //     console.log(error);\n  //   }\n  // };\n\n  render() {\n    const { movies } = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>\n        {movies ? this._renderMovies() : \"Loading\"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}